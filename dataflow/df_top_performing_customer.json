{
	"name": "df_top_performing_customer",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "db_transactions_sql",
						"type": "DatasetReference"
					},
					"name": "Transactions"
				},
				{
					"dataset": {
						"referenceName": "ds_products_sql",
						"type": "DatasetReference"
					},
					"name": "Products"
				},
				{
					"dataset": {
						"referenceName": "ds_customers_sql",
						"type": "DatasetReference"
					},
					"name": "Customers"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_brandSales",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "join2"
				},
				{
					"name": "select2"
				},
				{
					"name": "sort1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          customer_id as string,",
				"          product_id as long,",
				"          quantity as long,",
				"          transaction_date as timestamp,",
				"          transaction_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Transactions",
				"source(output(",
				"          id as long,",
				"          product_url as string,",
				"          color as string,",
				"          size as string,",
				"          width as string,",
				"          brand_name_en as string,",
				"          model_name as string,",
				"          classification as string,",
				"          purchaseCount as string,",
				"          avgRating as float,",
				"          qty as long,",
				"          wishlistCount as long,",
				"          market_price as long,",
				"          lenskart_price as long,",
				"          totalNoOfRatings as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Products",
				"source(output(",
				"          customer_id as string,",
				"          first_name as string,",
				"          last_name as string,",
				"          email as string,",
				"          phone_number as long,",
				"          address as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Customers",
				"Transactions, Products join(product_id == id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          customer_id,",
				"          product_id,",
				"          quantity,",
				"          lenskart_price",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive(total_amount = quantity * lenskart_price) ~> derivedColumn1",
				"derivedColumn1 aggregate(groupBy(customer_id),",
				"     quantity = sum(quantity),",
				"          total_amount = sum(total_amount)) ~> aggregate1",
				"aggregate1, Customers join(ERROR_FUNCTION('') == ERROR_FUNCTION(''),",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 select(mapColumn(",
				"          customer_id = Customers@customer_id,",
				"          quantity,",
				"          total_amount,",
				"          first_name,",
				"          phone_number",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 sort(desc(total_amount, true)) ~> sort1",
				"sort1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}