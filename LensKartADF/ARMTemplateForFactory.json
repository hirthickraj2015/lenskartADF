{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "LensKartADF"
		},
		"ls_ablob_lenskart_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_ablob_lenskart'"
		},
		"ls_asql_lenskart_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_asql_lenskart'"
		},
		"ls_dataset_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_dataset'"
		},
		"ls_http_lenskart_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ls_http_lenskart'"
		},
		"ls_http_lenskart_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://raw.githubusercontent.com/"
		},
		"ls_http_lenskart_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "ls_mongo_expensetracker"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/data_conv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_csv_to_table",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_csv_to_table",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"source3": {},
									"source4": {},
									"source5": {},
									"sink1": {},
									"sink2": {},
									"sink3": {},
									"sink4": {},
									"sink5": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_csv_to_table')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_brand_sales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_brandSales",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_brandSales",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_brandSales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_city_sales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "city_sales",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_city_sales",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_city_sales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_customer_denisty')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_customer_Density",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_customer_Density",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_customer_Density')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_generate_monthly_revenues')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_monthly_revenue",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_monthly_revenue",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_monthly_revenue')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_ingestion_raw_json')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup for lenkart list",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_lenkart_datalist",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "copying data from http to ablob",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup for lenkart list",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup for lenkart list').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_http_raw_csv",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@item().relativeUrl",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_ablob_raw_lenskart",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@item().fileName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_lenkart_datalist')]",
				"[concat(variables('factoryId'), '/datasets/ds_http_raw_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_ablob_raw_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_lenskart_offers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_lenskart_offers",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_lenskart_offers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "data_conv",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "data_conv",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pl_brand_sales",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "data_conv",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_brand_sales",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pl_mostStock_category",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "data_conv",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_mostStock_category",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pl_worst_products",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pl_brand_sales",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_worst_products",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pl_purchased_category",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pl_mostStock_category",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_purchased_category",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pl_top_selling_product",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pl_worst_products",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_top_selling_product",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pl_top_performing_customer",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "data_conv",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_top_performing_customer",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pl_lenskart_offers",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pl_purchased_category",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_lenskart_offers",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "top_performing_store_rating",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "data_conv",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "top_performing_store_rating",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pl_city_sales",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "top_performing_store_rating",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_city_sales",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pl_customer_denisty",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pl_city_sales",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_customer_denisty",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pl_generate_monthly_revenues",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pl_top_performing_customer",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_generate_monthly_revenues",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pl_yearly_sales",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pl_generate_monthly_revenues",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_yearly_sales",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pl_top_performing_customer1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pl_customer_denisty",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_top_performing_customer",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pl_stateStoreAvgrating",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pl_top_performing_customer1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_stateStoreAvgrating",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pl_wishlist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pl_lenskart_offers",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_wishlist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/data_conv')]",
				"[concat(variables('factoryId'), '/pipelines/pl_brand_sales')]",
				"[concat(variables('factoryId'), '/pipelines/pl_mostStock_category')]",
				"[concat(variables('factoryId'), '/pipelines/pl_worst_products')]",
				"[concat(variables('factoryId'), '/pipelines/pl_purchased_category')]",
				"[concat(variables('factoryId'), '/pipelines/pl_top_selling_product')]",
				"[concat(variables('factoryId'), '/pipelines/pl_top_performing_customer')]",
				"[concat(variables('factoryId'), '/pipelines/pl_lenskart_offers')]",
				"[concat(variables('factoryId'), '/pipelines/top_performing_store_rating')]",
				"[concat(variables('factoryId'), '/pipelines/pl_city_sales')]",
				"[concat(variables('factoryId'), '/pipelines/pl_customer_denisty')]",
				"[concat(variables('factoryId'), '/pipelines/pl_generate_monthly_revenues')]",
				"[concat(variables('factoryId'), '/pipelines/pl_yearly_sales')]",
				"[concat(variables('factoryId'), '/pipelines/pl_stateStoreAvgrating')]",
				"[concat(variables('factoryId'), '/pipelines/pl_wishlist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_mostStock_category')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_totalStock_category",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_totalStock",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_totalStock')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_purchased_category')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_categorysale",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_totalSpent_catogary",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"transactionSrc": {},
									"productSrc": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_totalSpent_catogary')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_stateStoreAvgrating')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_stateStoreAvgrating",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_top_performing_customer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_top_performing_customer",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Transactions": {},
									"Products": {},
									"Customers": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_top_performing_customer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_top_selling_product')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_top_products",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_top_products",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_top_products')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_wishlist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "wishlist_transform",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "wishlist_transform",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/wishlist_transform')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_worst_products')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_worst_perfo_products",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_worst_perfo_products",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_worst_perfo_products')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_yearly_sales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Yearly_sales",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "yearly_sales",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/yearly_sales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/top_performing_store_rating')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "top_performing_store_rating",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/top_performing_store_rating')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable5')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_asql_lenskart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "worstProducts"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_asql_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable6')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_asql_lenskart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "city_sales"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_asql_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable7')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_asql_lenskart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "year",
						"type": "int",
						"precision": 10
					},
					{
						"name": "revenue",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "yearly_sales"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_asql_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_ablob_lenskart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "customers.csv",
						"container": "lenskartcontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "first_name",
						"type": "String"
					},
					{
						"name": "last_name",
						"type": "String"
					},
					{
						"name": "email",
						"type": "String"
					},
					{
						"name": "phone_number",
						"type": "String"
					},
					{
						"name": "address",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ablob_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/db_offers_and_discount')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_asql_lenskart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "brand_name_en",
						"type": "nvarchar"
					},
					{
						"name": "market_price",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "lenskart_price",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Differnence",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Percentage",
						"type": "float",
						"precision": 15
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "discount_percentage"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_asql_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/db_prooducts_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_ablob_lenskart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "products.csv",
						"container": "lenskartcontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "product_url",
						"type": "String"
					},
					{
						"name": "color",
						"type": "String"
					},
					{
						"name": "size",
						"type": "String"
					},
					{
						"name": "width",
						"type": "String"
					},
					{
						"name": "brand_name_en",
						"type": "String"
					},
					{
						"name": "model_name",
						"type": "String"
					},
					{
						"name": "classification",
						"type": "String"
					},
					{
						"name": "purchaseCount",
						"type": "String"
					},
					{
						"name": "avgRating",
						"type": "String"
					},
					{
						"name": "qty",
						"type": "String"
					},
					{
						"name": "wishlistCount",
						"type": "String"
					},
					{
						"name": "market_price",
						"type": "String"
					},
					{
						"name": "lenskart_price",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ablob_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/db_reviews_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_asql_lenskart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "reviews"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_asql_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/db_stores_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_asql_lenskart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "stores"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_asql_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/db_top_performing_customer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_asql_lenskart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customer_id",
						"type": "nvarchar"
					},
					{
						"name": "first_name",
						"type": "nvarchar"
					},
					{
						"name": "Amount Spent",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Total Quantity",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "phone_number",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "topPerformingCustomer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_asql_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/db_transactions_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_asql_lenskart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customer_id",
						"type": "nvarchar"
					},
					{
						"name": "product_id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "quantity",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "transaction_date",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "transaction_id",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "transactions"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_asql_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ablob_raw_lenskart')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_ablob_lenskart",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"container": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ablob_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_best_stores')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_asql_lenskart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "best_performing_store"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_asql_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_brandSales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_asql_lenskart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "brandSales"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_asql_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_categorySale_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_asql_lenskart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "catogarySale"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_asql_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_cust_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_asql_lenskart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customer_id",
						"type": "nvarchar"
					},
					{
						"name": "customer_name",
						"type": "nvarchar"
					},
					{
						"name": "email",
						"type": "nvarchar"
					},
					{
						"name": "pincode",
						"type": "int",
						"precision": 10
					},
					{
						"name": "city",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "customers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_asql_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_customer_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_ablob_lenskart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "customers.csv",
						"container": "lenskartcontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "first_name",
						"type": "String"
					},
					{
						"name": "last_name",
						"type": "String"
					},
					{
						"name": "email",
						"type": "String"
					},
					{
						"name": "phone_number",
						"type": "String"
					},
					{
						"name": "address",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ablob_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_customer_density')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_asql_lenskart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "customer_density"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_asql_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_customers_data_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_asql_lenskart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customer_id",
						"type": "nvarchar"
					},
					{
						"name": "first_name",
						"type": "nvarchar"
					},
					{
						"name": "last_name",
						"type": "nvarchar"
					},
					{
						"name": "email",
						"type": "nvarchar"
					},
					{
						"name": "phone_number",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "address",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "customers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_asql_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_customers_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_asql_lenskart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customer_id",
						"type": "nvarchar"
					},
					{
						"name": "first_name",
						"type": "nvarchar"
					},
					{
						"name": "last_name",
						"type": "nvarchar"
					},
					{
						"name": "email",
						"type": "nvarchar"
					},
					{
						"name": "phone_number",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "address",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "customers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_asql_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_http_raw_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_http_lenskart",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"relativeUrl": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@dataset().relativeUrl",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_http_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_lenkart_datalist')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_ablob_lenskart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "list_lenskart.json",
						"container": "configs"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"fileName": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ablob_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_lenskart_raw_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_ablob_lenskart",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"container": "lenskartcontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "first_name",
						"type": "String"
					},
					{
						"name": "last_name",
						"type": "String"
					},
					{
						"name": "email",
						"type": "String"
					},
					{
						"name": "phone_number",
						"type": "String"
					},
					{
						"name": "address",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ablob_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_monthly_rev')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_asql_lenskart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "month",
						"type": "int",
						"precision": 10
					},
					{
						"name": "year",
						"type": "int",
						"precision": 10
					},
					{
						"name": "revenues",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "monthly_revenues"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_asql_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_products_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_asql_lenskart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "product_url",
						"type": "nvarchar"
					},
					{
						"name": "color",
						"type": "nvarchar"
					},
					{
						"name": "size",
						"type": "nvarchar"
					},
					{
						"name": "width",
						"type": "nvarchar"
					},
					{
						"name": "brand_name_en",
						"type": "nvarchar"
					},
					{
						"name": "model_name",
						"type": "nvarchar"
					},
					{
						"name": "classification",
						"type": "nvarchar"
					},
					{
						"name": "purchaseCount",
						"type": "nvarchar"
					},
					{
						"name": "avgRating",
						"type": "real",
						"precision": 7
					},
					{
						"name": "qty",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "wishlistCount",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "market_price",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "lenskart_price",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "totalNoOfRatings",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "products"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_asql_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_reviews_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_ablob_lenskart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "reviews_data.csv",
						"container": "lenskartcontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "reviewId",
						"type": "String"
					},
					{
						"name": "reviewTitle",
						"type": "String"
					},
					{
						"name": "reviewDetail",
						"type": "String"
					},
					{
						"name": "reviewee",
						"type": "String"
					},
					{
						"name": "noOfStars",
						"type": "String"
					},
					{
						"name": "reviewDate",
						"type": "String"
					},
					{
						"name": "reviewerType",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ablob_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sateStoreAvgRating_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_asql_lenskart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "sateStoreAvgRating"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_asql_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_dyanmic_lenskart')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_asql_lenskart",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"databaseName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().databaseName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_asql_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_stores_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_ablob_lenskart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "store_data.csv",
						"container": "lenskartcontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "alt_store_name_catch",
						"type": "String"
					},
					{
						"name": "address_full",
						"type": "String"
					},
					{
						"name": "address_state",
						"type": "String"
					},
					{
						"name": "store_phone",
						"type": "String"
					},
					{
						"name": "store_email",
						"type": "String"
					},
					{
						"name": "business_hours_openi",
						"type": "String"
					},
					{
						"name": "business_hours_closi",
						"type": "String"
					},
					{
						"name": "averageRating",
						"type": "String"
					},
					{
						"name": "totalReviews",
						"type": "String"
					},
					{
						"name": "pincode",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ablob_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_top_products')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_asql_lenskart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "topProductts"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_asql_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_top_products_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_asql_lenskart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "top_products"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_asql_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_top_products_sql_azure')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_asql_lenskart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "top_products"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_asql_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_total_stocks')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_asql_lenskart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "classification",
						"type": "nvarchar"
					},
					{
						"name": "total_stock",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "totalStocks"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_asql_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_transactions_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_ablob_lenskart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "transactions.csv",
						"container": "lenskartcontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "product_id",
						"type": "String"
					},
					{
						"name": "quantity",
						"type": "String"
					},
					{
						"name": "transaction_date",
						"type": "String"
					},
					{
						"name": "transaction_id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ablob_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_wishlist')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_asql_lenskart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "classification",
						"type": "nvarchar"
					},
					{
						"name": "wishlistCount",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "wishlist"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_asql_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_ablob_lenskart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "configs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ablob_lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_ablob_lenskart')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_ablob_lenskart_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_asql_lenskart')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_asql_lenskart_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_dataset')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_dataset_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_http_lenskart')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('ls_http_lenskart_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('ls_http_lenskart_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ls_http_lenskart_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "db_stores_sql",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sateStoreAvgRating_sql",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "sort1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as long,",
						"          alt_store_name_catch as string,",
						"          address_full as string,",
						"          address_state as string,",
						"          store_phone as long,",
						"          store_email as string,",
						"          business_hours_openi as string,",
						"          business_hours_closi as string,",
						"          averageRating as float,",
						"          totalReviews as long,",
						"          pincode as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 select(mapColumn(",
						"          address_state,",
						"          averageRating",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 aggregate(groupBy(address_state),",
						"     averageRating = iif(isNull(avg(averageRating)), 0.0, toFloat(avg(averageRating)))) ~> aggregate1",
						"aggregate1 filter(address_state!=\"Tamil�Nadu\") ~> filter1",
						"filter1 sort(asc(averageRating, true)) ~> sort1",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/db_stores_sql')]",
				"[concat(variables('factoryId'), '/datasets/ds_sateStoreAvgRating_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_brandSales')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_products_sql",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "db_transactions_sql",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_brandSales",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as long,",
						"          product_url as string,",
						"          color as string,",
						"          size as string,",
						"          width as string,",
						"          brand_name_en as string,",
						"          model_name as string,",
						"          classification as string,",
						"          purchaseCount as string,",
						"          avgRating as float,",
						"          qty as long,",
						"          wishlistCount as long,",
						"          market_price as long,",
						"          lenskart_price as long,",
						"          totalNoOfRatings as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          customer_id as string,",
						"          product_id as long,",
						"          quantity as long,",
						"          transaction_date as timestamp,",
						"          transaction_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"source1, source2 join(id == product_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          id,",
						"          brand_name_en,",
						"          classification,",
						"          lenskart_price,",
						"          quantity",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(tot_sales = quantity*lenskart_price) ~> derivedColumn1",
						"derivedColumn1 aggregate(groupBy(brand_name_en),",
						"     total_sold = sum(tot_sales)) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_products_sql')]",
				"[concat(variables('factoryId'), '/datasets/db_transactions_sql')]",
				"[concat(variables('factoryId'), '/datasets/ds_brandSales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_city_sales')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable5",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_cust_sql",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable6",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          customer_id as string,",
						"          first_name as string,",
						"          {Amount Spent} as long,",
						"          {Total Quantity} as long,",
						"          phone_number as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          customer_id as string,",
						"          customer_name as string,",
						"          email as string,",
						"          pincode as integer,",
						"          city as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"source1, source2 join(source1@customer_id == source2@customer_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 aggregate(groupBy(city),",
						"     revenue = sum({Amount Spent})) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable5')]",
				"[concat(variables('factoryId'), '/datasets/ds_cust_sql')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable6')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_csv_to_table')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_reviews_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "db_prooducts_csv",
								"type": "DatasetReference"
							},
							"name": "source2"
						},
						{
							"dataset": {
								"referenceName": "ds_stores_csv",
								"type": "DatasetReference"
							},
							"name": "source3"
						},
						{
							"dataset": {
								"referenceName": "ds_customer_csv",
								"type": "DatasetReference"
							},
							"name": "source4"
						},
						{
							"dataset": {
								"referenceName": "ds_transactions_csv",
								"type": "DatasetReference"
							},
							"name": "source5"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "db_reviews_sql",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "ds_products_sql",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "db_stores_sql",
								"type": "DatasetReference"
							},
							"name": "sink3"
						},
						{
							"dataset": {
								"referenceName": "ds_customers_sql",
								"type": "DatasetReference"
							},
							"name": "sink4"
						},
						{
							"dataset": {
								"referenceName": "db_transactions_sql",
								"type": "DatasetReference"
							},
							"name": "sink5"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          id as long,",
						"          reviewId as long,",
						"          reviewTitle as string,",
						"          reviewDetail as string,",
						"          reviewee as string,",
						"          noOfStars as integer,",
						"          reviewDate as timestamp 'yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'',",
						"          reviewerType as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          id as long,",
						"          product_url as string,",
						"          color as string,",
						"          size as string,",
						"          width as string,",
						"          brand_name_en as string,",
						"          model_name as string,",
						"          classification as string,",
						"          purchaseCount as long,",
						"          avgRating as double,",
						"          qty as long,",
						"          wishlistCount as long,",
						"          market_price as long,",
						"          lenskart_price as long,",
						"          totalNoOfRatings as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source(output(",
						"          id as long,",
						"          alt_store_name_catch as string,",
						"          address_full as string,",
						"          address_state as string,",
						"          store_phone as long,",
						"          store_email as string,",
						"          business_hours_openi as string,",
						"          business_hours_closi as string,",
						"          averageRating as float,",
						"          totalReviews as long,",
						"          pincode as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source3",
						"source(output(",
						"          customer_id as string,",
						"          first_name as string,",
						"          last_name as string,",
						"          email as string,",
						"          phone_number as long,",
						"          address as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source4",
						"source(output(",
						"          customer_id as string,",
						"          product_id as long,",
						"          quantity as long,",
						"          transaction_date as timestamp 'yyyy-MM-dd\\'T\\'HH:mm:ss',",
						"          transaction_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source5",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
						"source2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as long,",
						"          product_url as string,",
						"          color as string,",
						"          size as string,",
						"          width as string,",
						"          brand_name_en as string,",
						"          model_name as string,",
						"          classification as string,",
						"          purchaseCount as string,",
						"          avgRating as float,",
						"          qty as long,",
						"          wishlistCount as long,",
						"          market_price as long,",
						"          lenskart_price as long,",
						"          totalNoOfRatings as long",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id,",
						"          product_url,",
						"          color,",
						"          size,",
						"          width,",
						"          brand_name_en,",
						"          model_name,",
						"          classification,",
						"          purchaseCount,",
						"          avgRating,",
						"          qty,",
						"          wishlistCount,",
						"          market_price,",
						"          lenskart_price,",
						"          totalNoOfRatings",
						"     )) ~> sink2",
						"source3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink3",
						"source4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customer_id as string,",
						"          first_name as string,",
						"          last_name as string,",
						"          email as string,",
						"          phone_number as long,",
						"          address as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink4",
						"source5 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customer_id as string,",
						"          product_id as long,",
						"          quantity as long,",
						"          transaction_date as timestamp,",
						"          transaction_id as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink5"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_reviews_csv')]",
				"[concat(variables('factoryId'), '/datasets/db_prooducts_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_stores_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_customer_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_transactions_csv')]",
				"[concat(variables('factoryId'), '/datasets/db_reviews_sql')]",
				"[concat(variables('factoryId'), '/datasets/ds_products_sql')]",
				"[concat(variables('factoryId'), '/datasets/db_stores_sql')]",
				"[concat(variables('factoryId'), '/datasets/ds_customers_sql')]",
				"[concat(variables('factoryId'), '/datasets/db_transactions_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_customer_Density')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_cust_sql",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_customer_density",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          customer_id as string,",
						"          customer_name as string,",
						"          email as string,",
						"          pincode as integer,",
						"          city as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"source2 aggregate(groupBy(city),",
						"     density = count(1)) ~> aggregate2",
						"aggregate2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_cust_sql')]",
				"[concat(variables('factoryId'), '/datasets/ds_customer_density')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_lenskart_offers')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_products_sql",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "db_offers_and_discount",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as long,",
						"          product_url as string,",
						"          color as string,",
						"          size as string,",
						"          width as string,",
						"          brand_name_en as string,",
						"          model_name as string,",
						"          classification as string,",
						"          purchaseCount as string,",
						"          avgRating as float,",
						"          qty as long,",
						"          wishlistCount as long,",
						"          market_price as long,",
						"          lenskart_price as long,",
						"          totalNoOfRatings as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 select(mapColumn(",
						"          id,",
						"          brand_name_en,",
						"          market_price,",
						"          lenskart_price",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(Difference = abs(market_price - lenskart_price),",
						"          Percentage = (abs(market_price - lenskart_price)/market_price)*100) ~> derivedColumn1",
						"derivedColumn1 sort(desc(Percentage, true)) ~> sort1",
						"sort1 split(Percentage != 0.0,",
						"     disjoint: false) ~> split1@(true, false)",
						"split1@true sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as long,",
						"          brand_name_en as string,",
						"          market_price as long,",
						"          lenskart_price as long,",
						"          Differnence as long,",
						"          Percentage as double",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_products_sql')]",
				"[concat(variables('factoryId'), '/datasets/db_offers_and_discount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_monthly_revenue')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "db_transactions_sql",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_products_sql",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_total_stocks",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "join1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          customer_id as string,",
						"          product_id as long,",
						"          quantity as long,",
						"          transaction_date as timestamp,",
						"          transaction_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          id as long,",
						"          product_url as string,",
						"          color as string,",
						"          size as string,",
						"          width as string,",
						"          brand_name_en as string,",
						"          model_name as string,",
						"          classification as string,",
						"          purchaseCount as string,",
						"          avgRating as float,",
						"          qty as long,",
						"          wishlistCount as long,",
						"          market_price as long,",
						"          lenskart_price as long,",
						"          totalNoOfRatings as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"source1 derive(month = month(transaction_date),",
						"          year = year(transaction_date)) ~> derivedColumn1",
						"source2, derivedColumn1 join(id == product_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 derive(total_price = lenskart_price*quantity) ~> derivedColumn2",
						"derivedColumn2 aggregate(groupBy(month,",
						"          year),",
						"     revenues = sum(total_price)) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          classification as string,",
						"          total_stock as long",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/db_transactions_sql')]",
				"[concat(variables('factoryId'), '/datasets/ds_products_sql')]",
				"[concat(variables('factoryId'), '/datasets/ds_total_stocks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_top_performing_customer')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "db_transactions_sql",
								"type": "DatasetReference"
							},
							"name": "Transactions"
						},
						{
							"dataset": {
								"referenceName": "ds_products_sql",
								"type": "DatasetReference"
							},
							"name": "Products"
						},
						{
							"dataset": {
								"referenceName": "ds_customers_sql",
								"type": "DatasetReference"
							},
							"name": "Customers"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "db_top_performing_customer",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "join2"
						},
						{
							"name": "select2"
						},
						{
							"name": "sort1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          customer_id as string,",
						"          product_id as long,",
						"          quantity as long,",
						"          transaction_date as timestamp,",
						"          transaction_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Transactions",
						"source(output(",
						"          id as long,",
						"          product_url as string,",
						"          color as string,",
						"          size as string,",
						"          width as string,",
						"          brand_name_en as string,",
						"          model_name as string,",
						"          classification as string,",
						"          purchaseCount as string,",
						"          avgRating as float,",
						"          qty as long,",
						"          wishlistCount as long,",
						"          market_price as long,",
						"          lenskart_price as long,",
						"          totalNoOfRatings as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Products",
						"source(output(",
						"          customer_id as string,",
						"          first_name as string,",
						"          last_name as string,",
						"          email as string,",
						"          phone_number as long,",
						"          address as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Customers",
						"Transactions, Products join(product_id == id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          customer_id,",
						"          product_id,",
						"          quantity,",
						"          lenskart_price",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(total_amount = quantity * lenskart_price) ~> derivedColumn1",
						"derivedColumn1 aggregate(groupBy(customer_id),",
						"     quantity = sum(quantity),",
						"          total_amount = sum(total_amount)) ~> aggregate1",
						"aggregate1, Customers join(aggregate1@customer_id == Customers@customer_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 select(mapColumn(",
						"          customer_id = Customers@customer_id,",
						"          quantity,",
						"          total_amount,",
						"          first_name,",
						"          phone_number",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sort(desc(total_amount, true)) ~> sort1",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customer_id as string,",
						"          first_name as string,",
						"          {Amount Spent} as long,",
						"          {Total Quantity} as long,",
						"          phone_number as long",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/db_transactions_sql')]",
				"[concat(variables('factoryId'), '/datasets/ds_products_sql')]",
				"[concat(variables('factoryId'), '/datasets/ds_customers_sql')]",
				"[concat(variables('factoryId'), '/datasets/db_top_performing_customer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_top_products')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "db_transactions_sql",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_products_sql",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_top_products",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "sort1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          customer_id as string,",
						"          product_id as long,",
						"          quantity as long,",
						"          transaction_date as timestamp,",
						"          transaction_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          id as long,",
						"          product_url as string,",
						"          color as string,",
						"          size as string,",
						"          width as string,",
						"          brand_name_en as string,",
						"          model_name as string,",
						"          classification as string,",
						"          purchaseCount as string,",
						"          avgRating as float,",
						"          qty as long,",
						"          wishlistCount as long,",
						"          market_price as long,",
						"          lenskart_price as long,",
						"          totalNoOfRatings as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"source1, source2 join(product_id == id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 derive(total_price = quantity*lenskart_price) ~> derivedColumn1",
						"derivedColumn1 aggregate(groupBy(product_id),",
						"     total_sales = sum(total_price)) ~> aggregate1",
						"aggregate1 sort(desc(total_sales, true)) ~> sort1",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/db_transactions_sql')]",
				"[concat(variables('factoryId'), '/datasets/ds_products_sql')]",
				"[concat(variables('factoryId'), '/datasets/ds_top_products')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_totalSpent_catogary')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "db_transactions_sql",
								"type": "DatasetReference"
							},
							"name": "transactionSrc"
						},
						{
							"dataset": {
								"referenceName": "ds_products_sql",
								"type": "DatasetReference"
							},
							"name": "productSrc"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_categorySale_sql",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          customer_id as string,",
						"          product_id as long,",
						"          quantity as long,",
						"          transaction_date as timestamp,",
						"          transaction_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> transactionSrc",
						"source(output(",
						"          id as long,",
						"          product_url as string,",
						"          color as string,",
						"          size as string,",
						"          width as string,",
						"          brand_name_en as string,",
						"          model_name as string,",
						"          classification as string,",
						"          purchaseCount as string,",
						"          avgRating as float,",
						"          qty as long,",
						"          wishlistCount as long,",
						"          market_price as long,",
						"          lenskart_price as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> productSrc",
						"transactionSrc, productSrc join(product_id == id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          product_id,",
						"          quantity,",
						"          classification,",
						"          lenskart_price",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(tot_sales = quantity*lenskart_price) ~> derivedColumn1",
						"derivedColumn1 aggregate(groupBy(classification),",
						"     total_sale = sum(tot_sales)) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/db_transactions_sql')]",
				"[concat(variables('factoryId'), '/datasets/ds_products_sql')]",
				"[concat(variables('factoryId'), '/datasets/ds_categorySale_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_totalStock')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_products_sql",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_total_stocks",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "sort1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as long,",
						"          product_url as string,",
						"          color as string,",
						"          size as string,",
						"          width as string,",
						"          brand_name_en as string,",
						"          model_name as string,",
						"          classification as string,",
						"          purchaseCount as string,",
						"          avgRating as float,",
						"          qty as long,",
						"          wishlistCount as long,",
						"          market_price as long,",
						"          lenskart_price as long,",
						"          totalNoOfRatings as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 aggregate(groupBy(classification),",
						"     total_stock = sum(qty)) ~> aggregate1",
						"aggregate1 sort(desc(total_stock, true)) ~> sort1",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          classification as string,",
						"          total_stock as long",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_products_sql')]",
				"[concat(variables('factoryId'), '/datasets/ds_total_stocks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_worst_perfo_products')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_products_sql",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable5",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "join1"
						},
						{
							"name": "finalTableFormation"
						},
						{
							"name": "filter2"
						},
						{
							"name": "sort1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as long,",
						"          product_url as string,",
						"          color as string,",
						"          size as string,",
						"          width as string,",
						"          brand_name_en as string,",
						"          model_name as string,",
						"          classification as string,",
						"          purchaseCount as string,",
						"          avgRating as float,",
						"          qty as long,",
						"          wishlistCount as long,",
						"          market_price as long,",
						"          lenskart_price as long,",
						"          totalNoOfRatings as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 derive(metrics = avgRating/totalNoOfRatings) ~> derivedColumn1",
						"filter2 aggregate(groupBy(id),",
						"     min_const = min(metrics)) ~> aggregate1",
						"aggregate1, derivedColumn1 join(aggregate1@id == source1@id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          id = aggregate1@id,",
						"          brand_name_en,",
						"          model_name,",
						"          classification,",
						"          avgRating,",
						"          lenskart_price,",
						"          totalNoOfRatings,",
						"          metrics,",
						"          desision_col = min_const",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> finalTableFormation",
						"derivedColumn1 filter(!isNull(metrics)) ~> filter2",
						"finalTableFormation sort(asc(avgRating, true),",
						"     desc(totalNoOfRatings, true)) ~> sort1",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_products_sql')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable5')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/top_performing_store_rating')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "db_stores_sql",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_best_stores",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "join1"
						},
						{
							"name": "finalTableFormation"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as long,",
						"          alt_store_name_catch as string,",
						"          address_full as string,",
						"          address_state as string,",
						"          store_phone as long,",
						"          store_email as string,",
						"          business_hours_openi as string,",
						"          business_hours_closi as string,",
						"          averageRating as float,",
						"          totalReviews as float,",
						"          pincode as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 derive(const = averageRating/totalReviews) ~> derivedColumn1",
						"derivedColumn1 aggregate(groupBy(address_state),",
						"     max_const = max(const)) ~> aggregate1",
						"aggregate1, derivedColumn1 join(max_const == const,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          address_state = aggregate1@address_state,",
						"          id,",
						"          alt_store_name_catch,",
						"          address_full,",
						"          store_phone,",
						"          store_email,",
						"          averageRating,",
						"          totalReviews,",
						"          pincode",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> finalTableFormation",
						"finalTableFormation filter(id != 1681) ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/db_stores_sql')]",
				"[concat(variables('factoryId'), '/datasets/ds_best_stores')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/wishlist_transform')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_products_sql",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_wishlist",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregateClassification"
						},
						{
							"name": "sortWishlist"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as long,",
						"          product_url as string,",
						"          color as string,",
						"          size as string,",
						"          width as string,",
						"          brand_name_en as string,",
						"          model_name as string,",
						"          classification as string,",
						"          purchaseCount as string,",
						"          avgRating as float,",
						"          qty as long,",
						"          wishlistCount as long,",
						"          market_price as long,",
						"          lenskart_price as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 aggregate(groupBy(classification),",
						"     wishlistCount = sum(wishlistCount)) ~> aggregateClassification",
						"aggregateClassification sort(desc(wishlistCount, true)) ~> sortWishlist",
						"sortWishlist sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          classification as string,",
						"          wishlistCount as long",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_products_sql')]",
				"[concat(variables('factoryId'), '/datasets/ds_wishlist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/yearly_sales')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_monthly_rev",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable7",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          month as integer,",
						"          year as integer,",
						"          revenues as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 aggregate(groupBy(year),",
						"     revenue = sum(revenues)) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          year as integer,",
						"          revenue as long",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_monthly_rev')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable7')]"
			]
		}
	]
}